workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "testing" || $CI_COMMIT_BRANCH == "production"'
      when: always
    - when: never

variables:
  TF_DIR: ${CI_PROJECT_DIR}/infrastructure
  STATE_NAME: "team5-tf"
  ADDRESS: "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/terraform/state/${STATE_NAME}"

stages:
  - package
  - validate
  - test
  - plan
  - apply
  - destroy

image:
  name: hashicorp/terraform:latest
  entrypoint: [""]

# Set variables before scripts are executed
before_script:
  - apk add --update git curl docker
  - export GITLAB_ACCESS_TOKEN=$gitlab_token
  - export AWS_ACCESS_KEY=$aws_access_key
  - export AWS_SECRET_KEY=$aws_secret_key
  - export AWS_TOKEN=$aws_token
  - export AWS_DB_USERNAME=$aws_db_username
  - export AWS_DB_PASSWORD=$aws_db_password
  - export AWS_DB_DATABASE=$aws_db_database
  - export DOCKER_SOCK=tcp://docker:2375
  - export GITLAB_USERNAME=sooivervloessem
  - export GITLAB_DEPLOY_TOKEN_USERNAME=$gitlab_deploy_token_username
  - export GITLAB_DEPLOY_TOKEN_TOKEN=$gitlab_deploy_token_token
  - chmod +x notifications.sh
  - chmod +x terraform_command.sh
  - chmod +x terraform_init.sh
  - cd ${TF_DIR}

# Build and push docker image
package:
  stage: package
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind
  script:
    - cd ../
    - docker build -t $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID .
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker push $CI_REGISTRY_IMAGE
    - sh ./notifications.sh package success $discord_webhook_url

# Validate terraform code
validate:
  stage: validate
  script:
    - sh ../terraform_init.sh
    - sh ../terraform_command.sh validate || { sh ../notifications.sh plan failure $discord_webhook_url && exit 1;}
    - sh ../notifications.sh validate success $discord_webhook_url 
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
    - ${TF_DIR}/.terraform
    policy: pull-push

# Plan terraform changes
plan:
  stage: plan
  services:
    - docker:20.10.12-dind
  script:
    - sh ../terraform_init.sh
    - sh ../terraform_command.sh plan || { sh ../notifications.sh plan failure $discord_webhook_url && exit 1;}
    - sh ../notifications.sh plan success $discord_webhook_url
  dependencies:
    - validate
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
      - ${TF_DIR}/.terraform
    policy: pull

# Apply terraform changes
apply:
  stage: apply
  services:
    - docker:20.10.12-dind
  script:
    - sh ../terraform_init.sh
    - sh ../terraform_command.sh apply || { sh ../notifications.sh apply failure $discord_webhook_url && exit 1;}
    - sh ../notifications.sh apply success $discord_webhook_url
  dependencies:
    - plan
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
    - ${TF_DIR}/.terraform
    policy: pull

# Destroy resources via terraform if manual action 
destroy:
  stage: destroy
  services:
    - docker:20.10.12-dind
  script:
    - sh ../terraform_init.sh
    - sh ../terraform_command.sh destroy || { sh ../notifications.sh destroy failure $discord_webhook_url && exit 1;}
    - sh ../notifications.sh destroy success $discord_webhook_url
  dependencies:
    - plan
    - apply
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
    - ${TF_DIR}/.terraform
    policy: pull
  when: manual

include:
  - template: Security/SAST-IaC.gitlab-ci.yml